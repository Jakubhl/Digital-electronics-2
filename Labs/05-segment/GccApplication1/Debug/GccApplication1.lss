
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000306  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  000003ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dee  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  000012b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058e  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000497  00000000  00000000  000026ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name &= ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name |= (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name &= ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name |= (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <SEG_init>

    // Test of SSD: display number '3' at position 0
    
    SEG_update_shift_regs(5,2);
  f4:	62 e0       	ldi	r22, 0x02	; 2
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	0e 94 0e 01 	call	0x21c	; 0x21c <SEG_update_shift_regs>
    
    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
  fc:	e1 e8       	ldi	r30, 0x81	; 129
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 10c:	ef e6       	ldi	r30, 0x6F	; 111
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
    
    // 8-bit TIMER0 for switching positions
    TIM0_overflow_4ms();
 116:	85 b5       	in	r24, 0x25	; 37
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	85 bd       	out	0x25, r24	; 37
 11c:	85 b5       	in	r24, 0x25	; 37
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 122:	ee e6       	ldi	r30, 0x6E	; 110
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
    sei();
 12c:	78 94       	sei
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x3e>

00000130 <__vector_13>:
 **********************************************************************/

//static uint8_t pos = 0;  // This line will only run the first time
//static radek se vykona jedenkrat... bude si hodnotu pamatovat
ISR(TIMER1_OVF_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
    // WRITE YOUR CODE HERE
    
    cnt0++;
 152:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cnt0>
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cnt0>
    if(cnt0 > 15)
 15c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cnt0>
 160:	80 31       	cpi	r24, 0x10	; 16
 162:	10 f0       	brcs	.+4      	; 0x168 <__vector_13+0x38>
        cnt0 = 0;
 164:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cnt0>
    SEG_update_shift_regs(cnt0,cnt2);
 168:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
 16c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cnt0>
 170:	0e 94 0e 01 	call	0x21c	; 0x21c <SEG_update_shift_regs>
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
    cnt2++;
 1b8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    if(cnt2 > 3)
 1c2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1c6:	84 30       	cpi	r24, 0x04	; 4
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <__vector_16+0x38>
    cnt2 = 0;
 1ca:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
    SEG_update_shift_regs(cnt0,cnt2);
 1ce:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
 1d2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cnt0>
 1d6:	0e 94 0e 01 	call	0x21c	; 0x21c <SEG_update_shift_regs>
    
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <SEG_init>:


void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 1fc:	64 e0       	ldi	r22, 0x04	; 4
 1fe:	8a e2       	ldi	r24, 0x2A	; 42
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 206:	67 e0       	ldi	r22, 0x07	; 7
 208:	8a e2       	ldi	r24, 0x2A	; 42
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	84 e2       	ldi	r24, 0x24	; 36
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 21a:	08 95       	ret

0000021c <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 222:	e8 2f       	mov	r30, r24
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ec 5f       	subi	r30, 0xFC	; 252
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 22c:	e6 2f       	mov	r30, r22
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e0 50       	subi	r30, 0x00	; 0
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	d0 81       	ld	r29, Z
    // Pull LATCH, CLK, and DATA low
    
GPIO_write_low(&PORTD, SEG_LATCH);
 236:	64 e0       	ldi	r22, 0x04	; 4
 238:	8b e2       	ldi	r24, 0x2B	; 43
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
GPIO_write_low(&PORTD, SEG_CLK);
 240:	67 e0       	ldi	r22, 0x07	; 7
 242:	8b e2       	ldi	r24, 0x2B	; 43
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
GPIO_write_low(&PORTB, SEG_DATA);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	85 e2       	ldi	r24, 0x25	; 37
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	85 e0       	ldi	r24, 0x05	; 5
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <SEG_update_shift_regs+0x3a>
 25a:	00 00       	nop
 25c:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((segments & 0b00000001) == 0)
 25e:	10 fd       	sbrc	r17, 0
 260:	06 c0       	rjmp	.+12     	; 0x26e <SEG_update_shift_regs+0x52>
            GPIO_write_low(&PORTB, SEG_DATA);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	85 e2       	ldi	r24, 0x25	; 37
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 26c:	05 c0       	rjmp	.+10     	; 0x278 <SEG_update_shift_regs+0x5c>
        else
            GPIO_write_high(&PORTB, SEG_DATA);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	85 e2       	ldi	r24, 0x25	; 37
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	8a 95       	dec	r24
 27c:	f1 f7       	brne	.-4      	; 0x27a <SEG_update_shift_regs+0x5e>
 27e:	00 00       	nop
           
        // Wait 1 us
_delay_us(1);
        // Pull CLK high
GPIO_write_high(&PORTD, SEG_CLK);
 280:	67 e0       	ldi	r22, 0x07	; 7
 282:	8b e2       	ldi	r24, 0x2B	; 43
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <SEG_update_shift_regs+0x70>
 290:	00 00       	nop
        // Wait 1 us
_delay_us(1);
        // Pull CLK low
GPIO_write_low(&PORTD, SEG_CLK);
 292:	67 e0       	ldi	r22, 0x07	; 7
 294:	8b e2       	ldi	r24, 0x2B	; 43
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 29c:	16 95       	lsr	r17
 29e:	c1 50       	subi	r28, 0x01	; 1

    // Wait 1 us
_delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2a0:	f1 f6       	brne	.-68     	; 0x25e <SEG_update_shift_regs+0x42>
 2a2:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((position & 0b00000001) == 0)
 2a4:	d0 fd       	sbrc	r29, 0
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <SEG_update_shift_regs+0x98>
            GPIO_write_low(&PORTB, SEG_DATA);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	85 e2       	ldi	r24, 0x25	; 37
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <SEG_update_shift_regs+0xa2>
        else
            GPIO_write_high(&PORTB, SEG_DATA);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	85 e2       	ldi	r24, 0x25	; 37
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <SEG_update_shift_regs+0xa4>
 2c4:	00 00       	nop
        // Wait 1 us
_delay_us(1);
        // Pull CLK high
GPIO_write_high(&PORTD, SEG_CLK);
 2c6:	67 e0       	ldi	r22, 0x07	; 7
 2c8:	8b e2       	ldi	r24, 0x2B	; 43
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	8a 95       	dec	r24
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <SEG_update_shift_regs+0xb6>
 2d6:	00 00       	nop
        // Wait 1 us
_delay_us(1);
        // Pull CLK low
GPIO_write_low(&PORTD, SEG_CLK);
 2d8:	67 e0       	ldi	r22, 0x07	; 7
 2da:	8b e2       	ldi	r24, 0x2B	; 43
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 2e2:	d6 95       	lsr	r29
 2e4:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2e6:	f1 f6       	brne	.-68     	; 0x2a4 <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
GPIO_write_high(&PORTD, SEG_LATCH);
 2e8:	64 e0       	ldi	r22, 0x04	; 4
 2ea:	8b e2       	ldi	r24, 0x2B	; 43
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <SEG_update_shift_regs+0xd8>
 2f8:	00 00       	nop
    // Wait 1 us
_delay_us(1);
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	08 95       	ret

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
